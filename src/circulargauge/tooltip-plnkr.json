{"index.html":"<!DOCTYPE html><html><head>\n<meta charset=\"UTF-8\">\n<link href=\"http://cdn.syncfusion.com/ej2/material.css\" rel=\"stylesheet\">\n<link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n<script type=\"text/javascript\">\n   if (/MSIE d|Trident.*rv:/.test(navigator.userAgent)) {\n       document.write(\"<script src='https://cdnjs.cloudflare.com/ajax/libs/bluebird/3.3.5/bluebird.min.js'><\\/script>\");\n   }\n</script>\n<script src=\"http://cdn.syncfusion.com/ej2/dist/ej2.min.js\" type=\"text/javascript\"></script>\n</head>\n<body>\n<style>\n    #templateWrap img {\n        border-radius: 30px;\n        width: 30px;\n        height: 30px;\n        margin: 0 auto;\n    }\n\n    #templateWrap .des {\n        float: right;\n        padding-left: 10px;\n        line-height: 30px;\n    }\n</style>\n<script id=\"gauge-tooltip\" type=\"text/x-template\">\n    <div id='templateWrap'>\n        <img src=\"http://ej2.syncfusion.com/javascript/demos/src/circulargauge/images/range1.png\" />\n        <img src=\"http://ej2.syncfusion.com/javascript/demos/src/circulargauge/images/range3.png\" />\n        <div class='des'>\n            <span>${Math.round(pointers[0].value)} MPH</span>\n        </div>\n    </div>\n</script>\n<div class=\"control-section\">\n    <div id=\"tooltip-container\"></div>\n</div>\n\n\n<script src=\"index.js\" type=\"text/javascript\"></script>\n\n</body></html>","index.js":"ej.base.enableRipple(true)\n/**\r\n * Sample for Tooltip\r\n */\r\n\r\n    var circulargauge = new ej.circulargauge.CircularGauge({\r\n        load: function (args) {\r\n            var selectedTheme = location.hash.split('/')[1];\r\n            selectedTheme = selectedTheme ? selectedTheme : 'Material';\r\n            args.gauge.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1));\r\n        },\r\n        title: 'Tooltip Customization',\r\n        titleStyle: { size: '15px', color: 'grey' },\r\n        axes: [{\r\n            radius: '90%',\r\n            minimum: 0,\r\n            maximum: 120,\r\n            startAngle: 240,\r\n            endAngle: 120,\r\n            lineStyle: { width: 0 },\r\n            majorTicks: { color: 'white', offset: -5, height: 12 },\r\n            minorTicks: { width: 0 },\r\n            labelStyle: { useRangeColor: true, font: { color: '#424242', size: '13px', fontFamily: 'Roboto' } },\r\n            pointers: [{\r\n                value: 70,\r\n                radius: '60%',\r\n                color: '#33BCBD',\r\n                cap: { radius: 10, border: { color: '#33BCBD', width: 5 } },\r\n                animation: { enable: true, duration: 1500 }\r\n            }],\r\n            ranges: [{\r\n                start: 0,\r\n                end: 50,\r\n                startWidth: 10, endWidth: 10,\r\n                radius: '102%',\r\n                color: '#3A5DC8',\r\n            }, {\r\n                start: 50,\r\n                end: 120,\r\n                radius: '102%',\r\n                startWidth: 10, endWidth: 10,\r\n                color: '#33BCBD',\r\n            }]\r\n        }],\r\n        tooltip: {\r\n            enable: true,\r\n            fill: 'transparent',\r\n            template: '#gauge-tooltip', border: {\r\n                color: '#33BCBD',\r\n                width: 2\r\n            }\r\n        },\r\n        tooltipRender: function (args) {\r\n            var color;\r\n            var value = args.pointer.currentValue;\r\n            var content = args.content;\r\n            if (value >= 0 && value <= 50) {\r\n                color = '#3A5DC8';\r\n                content.children[1].remove();\r\n            }\r\n            else {\r\n                color = '#33BCBD';\r\n                content.children[0].remove();\r\n            }\r\n            args.textStyle.color = color;\r\n            args.border.color = color;\r\n            circulargauge.axes[0].pointers[0].animation.enable = false;\r\n            circulargauge.axes[0].pointers[0].color = color;\r\n            circulargauge.axes[0].pointers[0].cap.border.color = color;\r\n            circulargauge.setPointerValue(0, 0, value);\r\n        },\r\n        enablePointerDrag: true\r\n    });\r\n    circulargauge.appendTo('#tooltip-container');\r\n"}