{"index.html":"<!DOCTYPE html><html><head>\n<meta charset=\"UTF-8\">\n<link href=\"http://cdn.syncfusion.com/ej2/material.css\" rel=\"stylesheet\">\n<link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n<script type=\"text/javascript\">\n   if (/MSIE d|Trident.*rv:/.test(navigator.userAgent)) {\n       document.write(\"<script src='https://cdnjs.cloudflare.com/ajax/libs/bluebird/3.3.5/bluebird.min.js'><\\/script>\");\n   }\n</script>\n<script src=\"http://cdn.syncfusion.com/ej2/dist/ej2.min.js\" type=\"text/javascript\"></script>\n</head>\n<body>\n<div>\n    <div class=\"col-md-8 control-section\">\n        <div class=\"content-wrapper\">\n            <div id=\"axisContainer\"></div>\n        </div>\n    </div>\n    <div class=\"col-md-4 property-section\">\n        <table id=\"property\" title=\"Properties\" style=\"width: 100%;\">\n            <tbody><tr>\n                <td>\n                    <div id=\"minValue\">Axis Minimum\n                        <span>&#xA0;&#xA0;&#xA0;0</span>\n                    </div>\n                </td>\n                <td>\n                    <div>\n                        <input type=\"range\" step=\"5\" id=\"min\" value=\"0\" min=\"0\" max=\"100\" style=\"width:90%;\">\n                    </div>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <div id=\"maxValue\">Axis Maximum\n                        <span>&#xA0;&#xA0;&#xA0;100</span>\n                    </div>\n                </td>\n                <td>\n                    <div>\n                        <input type=\"range\" step=\"5\" id=\"max\" value=\"100\" min=\"0\" max=\"100\" style=\"width:90%;\">\n                    </div>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <div>Axis Inversed</div>\n                </td>\n                <td>\n                    <div>\n                        <input type=\"checkbox\" id=\"axisInversed\">\n                    </div>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <div>Axis Opposed</div>\n                </td>\n                <td>\n                    <div>\n                        <input type=\"checkbox\" id=\"opposed\">\n                    </div>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <div>Label Format</div>\n                </td>\n                <td>\n                    <div class=\"e-float-input\" style=\"margin-top: 0px;\">\n                        <input type=\"text\" value=\"{value}\" id=\"format\" class=\"form-control\" style=\"width:90%\">\n                    </div>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <div>Pointer type</div>\n                </td>\n                <td>\n                    <div>\n                        <select name=\"selectIndex\" autocomplete=\"off\" id=\"pointerType\" class=\"form-control\" style=\"width:90%\">\n                            <option value=\"Marker\">Marker</option>\n                            <option value=\"Bar\">Bar</option>\n                        </select>\n                    </div>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <div>Marker Placement</div>\n                </td>\n                <td>\n                    <div>\n                        <select name=\"selectIndex\" autocomplete=\"off\" id=\"pointerPlace\" class=\"form-control\" style=\"width:90%\">\n                            <option value=\"Far\">Far</option>\n                            <option value=\"Near\">Near</option>\n                            <option value=\"Center\">Center</option>\n                        </select>\n                    </div>\n                </td>\n            </tr>\n        </tbody></table>\n    </div>\n</div>\n\n\n<style>\n    #control-container {\n        padding: 0px !important;\n    }\n\n    .property-panel-section {\n        height: 380px;\n    }\n</style>\n<script src=\"index.js\" type=\"text/javascript\"></script>\n\n</body></html>","index.js":"ej.base.enableRipple(true)\n/**\r\n * Axes Sample\r\n */\r\n\r\n    var gauge = new ej.lineargauge.LinearGauge(linearAxes());\r\n    gauge.appendTo('#axisContainer');\r\n    document.getElementById('opposed').onchange = function (sender) {\r\n        var ele = document.getElementById('opposed');\r\n        gauge.axes[0].opposedPosition = ele.checked;\r\n        if (ele.checked) {\r\n            gauge.axes[0].pointers[0].placement = 'Near';\r\n            gauge.axes[0].pointers[0].markerType = 'Triangle';\r\n            gauge.axes[0].pointers[0].offset = -20;\r\n            gauge.axes[0].labelStyle.offset = 0;\r\n            gauge.annotations[0].x = 10;\r\n            gauge.annotations[0].y = -60;\r\n        }\r\n        else {\r\n            gauge.axes[0].pointers[0].placement = 'Far';\r\n            gauge.axes[0].pointers[0].offset = 0;\r\n            gauge.axes[0].pointers[0].offset = 30;\r\n            gauge.axes[0].pointers[0].markerType = 'InvertedTriangle';\r\n            gauge.axes[0].labelStyle.offset = 38;\r\n            gauge.annotations[0].x = 10;\r\n            gauge.annotations[0].y = 60;\r\n        }\r\n        gauge.refresh();\r\n    };\r\n    document.getElementById('axisInversed').onchange = function (sender) {\r\n        var ele = document.getElementById('axisInversed');\r\n        gauge.axes[0].isInversed = ele.checked;\r\n        gauge.refresh();\r\n    };\r\n    document.getElementById('min').ontouchmove = document.getElementById('min').onpointermove =\r\n        document.getElementById('min').onchange = function () {\r\n            var min = document.getElementById('min');\r\n            var max = document.getElementById('max');\r\n            gauge.axes[0].minimum = parseInt(min.value, 10);\r\n            gauge.axes[0].maximum = parseInt(max.value, 10);\r\n            document.getElementById('minValue').innerHTML = 'Axis Minimum <span>&nbsp;&nbsp;&nbsp;' + min.value;\r\n            gauge.refresh();\r\n            gauge.annotations[0].axisValue = gauge.axes[0].pointers[0].currentValue;\r\n            gauge.refresh();\r\n        };\r\n    document.getElementById('max').ontouchmove = document.getElementById('max').onpointermove =\r\n        document.getElementById('max').onchange = function () {\r\n            var min = document.getElementById('min');\r\n            var max = document.getElementById('max');\r\n            gauge.axes[0].maximum = parseInt(max.value, 10);\r\n            gauge.axes[0].minimum = parseInt(min.value, 10);\r\n            document.getElementById('maxValue').innerHTML = 'Axis Maximum <span>&nbsp;&nbsp;&nbsp;' + max.value;\r\n            gauge.refresh();\r\n            gauge.annotations[0].axisValue = gauge.axes[0].pointers[0].currentValue;\r\n            gauge.refresh();\r\n        };\r\n    document.getElementById('format').onchange = function () {\r\n        var ele = document.getElementById('format');\r\n        gauge.axes[0].labelStyle.format = ele.value.indexOf('{value}') > -1 ? ele.value : gauge.axes[0].labelStyle.format;\r\n        gauge.refresh();\r\n    };\r\n    var pointerPlace = new ej.dropdowns.DropDownList({\r\n        index: 0,\r\n        placeholder: 'Select Range Bar Color',\r\n        width: 120,\r\n        change: function () {\r\n            gauge.axes[0].pointers[0].placement = pointerPlace.value;\r\n            gauge.refresh();\r\n        }\r\n    });\r\n    pointerPlace.appendTo('#pointerPlace');\r\n    var pointerType = new ej.dropdowns.DropDownList({\r\n        index: 0,\r\n        placeholder: 'Select Range Bar Color',\r\n        width: 120,\r\n        change: function () {\r\n            gauge.axes[0].pointers[0].type = pointerType.value;\r\n            pointerPlace.enabled = (pointerType.value === 'Marker');\r\n            gauge.refresh();\r\n        }\r\n    });\r\n    pointerType.appendTo('#pointerType');\r\n\r\nfunction getRandomArbitrary(min, max) {\r\n    return Math.random() * (max - min) + min;\r\n}\r\nfunction linearAxes() {\r\n    var gauge = new ej.lineargauge.LinearGauge({\r\n        load: function (args) {\r\n            var selectedTheme = location.hash.split('/')[1];\r\n            selectedTheme = selectedTheme ? selectedTheme : 'Material';\r\n            args.gauge.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1));\r\n        },\r\n        orientation: 'Horizontal',\r\n        axes: [{\r\n            line: {\r\n                color: '#9E9E9E'\r\n            },\r\n            pointers: [{\r\n                value: 10,\r\n                height: 15,\r\n                width: 15,\r\n                color: '#757575',\r\n                offset: 30\r\n            }],\r\n            majorTicks: {\r\n                color: '#9E9E9E',\r\n                interval: 10\r\n            },\r\n            minorTicks: {\r\n                color: '#9E9E9E',\r\n                interval: 2\r\n            },\r\n            labelStyle: {\r\n                offset: 48\r\n            }\r\n        }],\r\n        annotations: [{\r\n            content: '<div id=\"pointer\" style=\"width:70px\"><h1 style=\"font-size:14px;\">' +\r\n            '${axes[0].pointers[0].currentValue} MPH</h1></div>',\r\n            axisIndex: 0,\r\n            axisValue: 10,\r\n            x: 10,\r\n            y: 60, zIndex: '1'\r\n        }]\r\n    });\r\n    return gauge;\r\n}"}